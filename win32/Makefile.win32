#
# C Shell with process control; VM/UNIX VAX Makefile
# Bill Joy UC Berkeley; Jim Kulp IIASA, Austria
#
# With an input editor, command completion, etc. and ported to all sorts of
# things; Paul Placeway, CIS Dept., Ohio State University
#
#
# Windows NT version: Amol Deshpande, Microsoft Corp.
#

################################################################
## CFLAGS.  For various -D things, see config.h
################################################################
#
# These are the default suffixes from .c to .o and -c to get there
# but to use the global optimizer on the mips boxes, see below
#
SUF=obj
CF=-c -nologo 

INCLUDES=-I. -I.. -Iwin32 

DEBUG_CRTLIBS= libcmtd.lib oldnames.lib  libcpmtd.lib libvcruntimed.lib libucrtd.lib legacy_stdio_definitions.lib legacy_stdio_wide_specifiers.lib
CRTLIBS= libcmt.lib oldnames.lib libcpmt.lib libvcruntime.lib libucrt.lib legacy_stdio_definitions.lib legacy_stdio_wide_specifiers.lib

EXTRAFLAGS = -DWINNT_NATIVE -DWINNT_NATIVE_UTF8_SUPPORT -DNO_CRYPT -DHAVE_DIRENT_H $(EFL) \
              -wd28159 -wd28218 -wd28199 -wd6387 -wd6385 -wd6553

WINDOWS_WARNING_LEVEL=-W4 -WX
REST_WARNING_LEVEL=-WX -W3
ANALYZE_FLAGS = -analyze


!if "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
#main code is broken for 64-bit. ignore warnings and pray it works
 
REST_WARNING_LEVEL= -W3
ANALYZE_FLAGS= 
IGNORE_64= -wd4244 -wd4267  -wd4311

!if "$(WIN64)" == ""
!Message
!Message Assuming x64 compile. pass WIN64=0 in command line if compiling 32-bit
!Message
WIN64=1
!endif

!endif


!if "$(WIN64)" == ""
WIN64=0
ARCH=x86
!else
ARCH=x64
WIN64=1
!endif

BUILD=tcsh-$(ARCH).exe

!if "$(BLDTYPE)" == ""
BLDTYPE=retail
!endif

!if "$(BLDTYPE)" == "debug"


NTLDFLAGS=  -entry:silly_entry  -debug
NTCFLAGS = -Zi -DNTDBG   -Od
LIBES= user32.lib advapi32.lib kernel32.lib $(DEBUG_CRTLIBS) strsafe.lib

!else if "$(BLDTYPE)" == "retail"

NTLDFLAGS=  -entry:silly_entry  -debug
NTCFLAGS = -Zi -O2 
LIBES= user32.lib advapi32.lib kernel32.lib  $(CRTLIBS) strsafe.lib

!else

!ERROR Unknown compilation mode $(BLDTYPE). Set debug or retail
!endif

!if "$(WIN64)" == "1"
NTCFLAGS = $(NTCFLAGS) -Zp8
!endif

!if "$(FASTBUILD)" != ""
FASTFLAGS= -MP
FASTTARGET=fastbuild
!endif

CFLAGS= -MT $(FASTFLAGS) $(NTCFLAGS) $(INCLUDES) 
LDFLAGS= -nodefaultlib $(NTLDFLAGS) -stack:1048576,524288 -dynamicbase:no -ignore:4099


CC=	cl 	

ED=	ed
RM=	-del
#
# Resources. which icon you want to use.
NTRES = BSDLOGO

ASSRCS1=	sh.c sh.dir.c sh.err.c sh.exec.c sh.char.c \
	sh.exp.c sh.file.c sh.hist.c sh.init.c \
	sh.lex.c sh.misc.c sh.parse.c sh.print.c \
	sh.set.c sh.time.c 
ASSRCS= $(ASSRCS1) sh.dol.c sh.glob.c sh.func.c sh.sem.c sh.proc.c 

PSSRCS= glob.c mi.termios.c ma.setp.c vms.termcap.c

SHSRCS= $(ASSRCS) $(PSSRCS)
SHOBJS=	sh.$(SUF) sh.dir.$(SUF) sh.dol.$(SUF) sh.err.$(SUF) sh.exec.$(SUF) \
	sh.char.$(SUF) sh.exp.$(SUF) sh.func.$(SUF) sh.glob.$(SUF) \
	sh.hist.$(SUF) sh.init.$(SUF) sh.lex.$(SUF) sh.misc.$(SUF) \
	sh.parse.$(SUF) sh.print.$(SUF) sh.proc.$(SUF) sh.sem.$(SUF) \
	sh.set.$(SUF) sh.time.$(SUF) glob.$(SUF) mi.termios.$(SUF) \
	ma.setp.$(SUF)  

TWSRCS1= tw.help.c tw.init.c tw.spell.c \
	
TWSRCS= $(TWSRCS1) tw.parse.c tw.comp.c tw.color.c

TWOBJS=	tw.help.$(SUF) tw.init.$(SUF) tw.parse.$(SUF) tw.spell.$(SUF) \
	tw.comp.$(SUF) tw.color.$(SUF)

EDSRCS1= ed.defns.c ed.init.c  ed.xmap.c ed.term.c 
EDSRCS = $(EDSRCS1) ed.chared.c ed.inputl.c ed.refresh.c 

EDOBJS=	ed.chared.$(SUF) ed.refresh.$(SUF) ed.init.$(SUF) \
	ed.inputl.$(SUF) ed.defns.$(SUF) ed.xmap.$(SUF) ed.term.$(SUF)

TCSRCS1= tc.const.c tc.disc.c \
	tc.func.c tc.os.c tc.nls.c \
	tc.sched.c tc.sig.c tc.str.c tc.vers.c \
	tc.who.c 

TCSRCS = $(TCSRCS1) tc.alloc.c tc.bind.c tc.printf.c tc.prompt.c 

TCOBJS=	tc.alloc.$(SUF) tc.bind.$(SUF) tc.const.$(SUF)  \
	tc.disc.$(SUF) tc.func.$(SUF) tc.os.$(SUF) tc.printf.$(SUF) tc.nls.$(SUF) \
	tc.prompt.$(SUF) tc.sched.$(SUF) tc.sig.$(SUF) tc.str.$(SUF) \
	tc.vers.$(SUF) tc.who.$(SUF) 

NTSRCS1 = win32\io.c win32\stdio.c win32\dirent.c win32\signal.c\
		win32\support.c \
		win32\nt.char.c win32\bogus.c win32\console.c \
		win32\ntfunc.c win32\ntb1.c win32\ntb2.c win32\globals.c \
		win32\ps.c win32\nt.const.c win32\clip.c\
		win32\nt.bind.c  win32\nt.screen.c

NTSRCS = $(NTSRCS1) win32\fork.c 

NTOBJS = io.$(SUF) stdio.$(SUF) dirent.$(SUF) signal.$(SUF) support.$(SUF) \
	    nt.char.$(SUF) bogus.$(SUF) console.$(SUF) fork.$(SUF) ntfunc.$(SUF) \
        globals.$(SUF)  ps.$(SUF) \
		clip.$(SUF) nt.const.$(SUF) nt.bind.$(SUF) nt.screen.$(SUF)

VHSRCS=$(PVSRCS) $(AVSRCS)


ALLSRCS=  $(SHSRCS) $(TWSRCS) $(EDSRCS) $(TCSRCS) $(VHSRCS) $(NTSRCS)
DISTSRCS= $(PSSRCS) $(TWSRCS) $(EDSRCS) $(TCSRCS) $(AVSRCS) 


OBJS= $(SHOBJS) $(TWOBJS) $(EDOBJS) $(TCOBJS) $(NTOBJS)


all: $(BUILD)

$(BUILD): $(FASTTARGET) $(OBJS)  ntb1.$(SUF) ntb2.$(SUF) win32/$(NTRES).res 
	win32\create_manifest.cmd > win32\tcsh.manifest
	link $(LDFLAGS) ntb1.$(SUF) $(OBJS)  $(LIBES) ntb2.$(SUF) $(EXTRALIBS) \
	win32/$(NTRES).res $(LOADABLE_RES) -map:tcsh.map -out:$(BUILD) 
	mt.exe -manifest win32\tcsh.manifest -outputresource:$(BUILD);1

gcompress:$(BUILD)
	gzip -v9 $(BUILD)

bintar:  gcompress
	tar -cvf tcsh-$(ARCH)-bin.tar $(BUILD) win32/README.NT \
	win32/example.tcshrc  win32/tcsh-html.tgz win32/bin
	gzip -v9 tcsh-$(ARCH)-bin.tar
	move tcsh-$(ARCH)-bin.tar.gz ..

win32srctar: $(NTSRCS)
	tar -cvf tcshwin32src.tar win32 --exclude win32/bin
	gzip -v9 tcshwin32src.tar
	move tcshwin32src.tar.gz ..


chlog:
	tcsh -fc "echo \<XMP\> > win32\\Changelog.html"
	type win32\Changelog >> win32\ChangeLog.html
	tcsh -fc "echo \</XMP\> >> win32\\ChangeLog.html"



.c.$(SUF):
	$(CC) $(CF) $(CFLAGS) $(REST_WARNING_LEVEL) $(DFLAGS) $(EXTRAFLAGS) $<


ed.defns.h: ed.defns.c
	-@del  $@
	@echo /* Do not edit this file, make creates it. */ > $@
	@echo #ifndef _h_ed_defns >> $@
	@echo #define _h_ed_defns >> $@
	findstr /R [FV]_ ed.defns.c | findstr /B #define >> $@
	@echo #endif /* _h_ed_defns */ >> $@

sh.err.h: sh.err.c
	-@del  $@
	@echo /* Do not edit this file, make creates it. */ > $@
	@echo #ifndef _h_sh_err >> $@
	@echo #define _h_sh_err >> $@
	findstr ERR_ sh.err.c | findstr /B #define >> $@
	@echo #endif /* _h_sh_err */ >> $@

tc.const.h: tc.const.c sh.char.h config.h config_f.h sh.types.h sh.err.h patchlevel.h
	-@del  $@
	@echo /* Do not edit this file, make creates it. */ > $@
	@echo #ifndef _h_tc_const >> $@
	@echo #define _h_tc_const >> $@
    @for /f "tokens=1 delims==" %i in ('$(CC) -E $(INCLUDES) $(DFLAGS) $(EXTRAFLAGS) -D_h_tc_const -nologo \
	    tc.const.c ^| findstr /c:"Char STR" ^|  sort') do @echo extern %i; >> $@ 
	@echo #endif /* _h_tc_const */ >> $@

win32\nt.const.h: win32\nt.const.c sh.char.h config.h config_f.h sh.types.h sh.err.h tc.const.h
	-@del  $@
	@echo /* Do not edit this file, make creates it. */ > $@
	@echo #ifndef _h_nt_const >> $@
	@echo #define _h_nt_const >> $@
    @for /f "tokens=1 delims==" %i in ('$(CC) -E $(INCLUDES) $(DFLAGS) $(EXTRAFLAGS) -D_h_nt_const -nologo \
	    win32\nt.const.c ^| findstr /c:"Char STR" ^|  sort') do @echo extern %i; >> $@ 
	@echo #endif /* _h_nt_const */ >> $@

patchlevel.h: patchlevel.h.in
	win32\create_patchlevel.cmd

clean:
	$(RM)  *.$(SUF) sh.prof.c ed.defns.h tc.const.h sh.err.h tc.defs.c patchlevel.h
	$(RM)  *.pdb *.pch *.ilk *.map *.dbg *.res
	cd win32
	$(RM) *.res nt.const.h
	cd ..

cleanall: clean
	-del $(BUILD)
	-del *nativecodeanalysi*.xml


config.h: config_f.h

TCH=tc.h tc.const.h tc.decls.h tc.os.h tc.sig.h
SHH=sh.h sh.types.h sh.char.h sh.err.h sh.dir.h sh.proc.h pathnames.h \
    sh.decls.h $(TCH)
TWH=tw.h tw.decls.h
EDH=ed.h ed.decls.h

# EDH
EDINC=sh.$(SUF) sh.func.$(SUF) sh.lex.$(SUF) sh.print.$(SUF) sh.proc.$(SUF) \
      sh.set.$(SUF) tc.bind.$(SUF) tc.os.$(SUF) tc.prompt.$(SUF) \
      tc.sched.$(SUF) tw.parse.$(SUF)
$(EDOBJS) $(EDINC) : $(EDH)

# SHH
$(OBJS): win32\nt.const.h win32\ntport.h win32\version.h config.h $(SHH)

# TWH
TWINC=ed.chared.$(SUF) ed.inputl.$(SUF) sh.exec.$(SUF) sh.func.$(SUF) \
      sh.set.$(SUF) tc.func.$(SUF)
$(TWOBJS) $(TWINC): $(TWH)

# glob.h
glob.$(SUF) sh.glob.$(SUF): glob.h

# ed.defns.h
EDDINC=tc.bind.$(SUF) tc.func.$(SUF) tc.os.$(SUF)
$(EDOBJS) $(EDDINC): ed.defns.h

# tc.defs.o
tc.defs.$(SUF):	tc.defs.c sh.h

# too many 64-bit warnings in these files. for now, turn the warning off.
ed.chared.$(SUF): ed.chared.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) ed.chared.c
ed.inputl.$(SUF): ed.inputl.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) ed.inputl.c
sh.dol.$(SUF): sh.dol.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) sh.dol.c
sh.func.$(SUF): sh.func.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) sh.func.c
sh.glob.$(SUF): sh.glob.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) sh.glob.c
tw.parse.$(SUF): tw.parse.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) tw.parse.c
tw.comp.$(SUF): tw.comp.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) tw.comp.c
tw.color.$(SUF): tw.color.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) tw.color.c
ed.refresh.$(SUF): ed.refresh.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) ed.refresh.c
tc.alloc.$(SUF): tc.alloc.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) tc.alloc.c
tc.bind.$(SUF): tc.bind.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) tc.bind.c
tc.printf.$(SUF): tc.printf.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) tc.printf.c
tc.prompt.$(SUF): tc.prompt.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) tc.prompt.c

# turn optimizations off just for these files otherwise fork doesn't work
sh.sem.$(SUF): sh.sem.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS) -Od  -wd4748 sh.sem.c
sh.proc.$(SUF): sh.proc.c
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS) -Od  -wd4748 sh.proc.c
	
#
# NT dependencies and rules
#
CFLAGS_WX = $(CFLAGS) $(WINDOWS_WARNING_LEVEL) -DWINDOWS_ONLY $(ANALYZE_FLAGS)

{win32}.c.$(SUF): 
	$(CC) $(CF) $(CFLAGS_WX) $(DFLAGS) $(EXTRAFLAGS) $<

fork.$(SUF):win32\fork.c 
	$(CC) $(CF) $(CFLAGS_WX) $(DFLAGS) $(EXTRAFLAGS) -GS- win32\fork.c

nt.bind.$(SUF):win32\nt.bind.c ed.defns.h

nt.screen.$(SUF):win32\nt.screen.c ed.defns.h

win32/$(NTRES).res: win32/$(NTRES).rc win32/tcshrc.rc
	rc -v $(RCFLAGS_WX) -r win32/$(NTRES).rc

fastbuild: ed.defns.h sh.err.h tc.const.h win32\nt.const.h
	$(CC) $(CF) $(CFLAGS) $(DFLAGS) $(EXTRAFLAGS)  $(IGNORE_64) ed.chared.c\
	ed.inputl.c sh.dol.c sh.func.c sh.glob.c tw.parse.c tw.comp.c tw.color.c\
	 ed.refresh.c tc.alloc.c tc.bind.c tc.printf.c tc.prompt.c
	$(CC) $(CF) $(CFLAGS_WX) $(DFLAGS) $(EXTRAFLAGS) $(NTSRCS1)
	$(CC) $(CF) $(CFLAGS) $(REST_WARNING_LEVEL) $(DFLAGS) $(EXTRAFLAGS) $(ASSRCS1)  \
	$(TWSRCS1) $(SHSRCS1)  $(TCSRCS1) $(PSSRCS) $(EDSRCS1)
